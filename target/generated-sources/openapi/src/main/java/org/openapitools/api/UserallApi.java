/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import com.kabilesh.generated.Dto.Error;
import com.kabilesh.generated.Dto.UserDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-20T13:00:44.281885900+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "userall", description = "the userall API")
public interface UserallApi {

    default UserallApiDelegate getDelegate() {
        return new UserallApiDelegate() {};
    }

    /**
     * GET /userall : Get all users
     *
     * @return Users found. (status code 200)
     *         or Users not found. (status code 404)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Get all users",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Users not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/userall",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDTO>> getUsers(
        
    ) {
        return getDelegate().getUsers();
    }

}
